import { Injectable, NgModule } from '@angular/core';
import { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';
import { Cookie } from 'ng2-cookies';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LogglyService {
    /**
     * @param {?} _http
     */
    constructor(_http) {
        this._http = _http;
        this.LOGGLY_INPUT_PREFIX = 'http' + (('https:' === document.location.protocol ? 's' : '')) + '://';
        this.LOGGLY_COLLECTOR_DOMAIN = 'logs-01.loggly.com';
        this.LOGGLY_SESSION_KEY = 'logglytrackingsession';
        this.LOGGLY_SESSION_KEY_LENGTH = this.LOGGLY_SESSION_KEY + 1;
        this.LOGGLY_PROXY_DOMAIN = 'loggly';
    }
    /**
     * @return {?}
     */
    uuid() {
        // lifted from here -> http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            let /** @type {?} */ r = Math.random() * 16 | 0, /** @type {?} */ v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    /**
     * @param {?} tracker
     * @param {?} key
     * @return {?}
     */
    setKey(tracker, key) {
        tracker.key = key;
        tracker.setSession();
        this.setInputUrl(tracker);
    }
    /**
     * @param {?} tracker
     * @param {?} tag
     * @return {?}
     */
    setTag(tracker, tag) {
        tracker.tag = tag;
    }
    /**
     * @param {?} tracker
     * @param {?} useDomainProxy
     * @return {?}
     */
    setDomainProxy(tracker, useDomainProxy) {
        tracker.useDomainProxy = useDomainProxy;
        // refresh inputUrl value
        this.setInputUrl(tracker);
    }
    /**
     * @param {?} tracker
     * @param {?} sendConsoleErrors
     * @return {?}
     */
    setSendConsoleError(tracker, sendConsoleErrors) {
        tracker.sendConsoleErrors = sendConsoleErrors;
        if (tracker.sendConsoleErrors === true) {
            let /** @type {?} */ _onerror = window.onerror;
            // send console error messages to Loggly
            window.onerror = function (msg, url, line, col) {
                tracker.push({
                    category: 'BrowserJsException',
                    exception: {
                        message: msg,
                        url: url,
                        lineno: line,
                        colno: col,
                    }
                });
                if (_onerror && typeof _onerror === 'function') {
                    _onerror.apply(window, arguments);
                }
            };
        }
    }
    /**
     * @param {?} tracker
     * @return {?}
     */
    setInputUrl(tracker) {
        if (tracker.useDomainProxy === true) {
            tracker.inputUrl = this.LOGGLY_INPUT_PREFIX
                + window.location.host
                + '/'
                + this.LOGGLY_PROXY_DOMAIN
                + '/inputs/'
                + tracker.key
                + '/tag/'
                + tracker.tag;
        }
        else {
            tracker.inputUrl = this.LOGGLY_INPUT_PREFIX
                + (tracker.logglyCollectorDomain || this.LOGGLY_COLLECTOR_DOMAIN)
                + '/inputs/'
                + tracker.key
                + '/tag/'
                + tracker.tag;
        }
    }
    /**
     * @param {?} session_id
     * @return {?}
     */
    setSession(session_id) {
        if (session_id) {
            this.session_id = session_id;
            this.setCookie(this.session_id);
        }
        else if (!this.session_id) {
            this.session_id = this.readCookie();
            if (!this.session_id) {
                this.session_id = this.uuid();
                this.setCookie(this.session_id);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    push(data) {
        let /** @type {?} */ type = typeof data;
        if (!data || !(type === 'object' || type === 'string')) {
            return;
        }
        let /** @type {?} */ self = this;
        if (type === 'string') {
            data = {
                'text': data
            };
        }
        else {
            if (data.logglyCollectorDomain) {
                self.logglyCollectorDomain = data.logglyCollectorDomain;
                return;
            }
            if (data.sendConsoleErrors !== undefined) {
                this.setSendConsoleError(self, data.sendConsoleErrors);
            }
            if (data.tag) {
                this.setTag(self, data.tag);
            }
            if (data.useDomainProxy) {
                this.setDomainProxy(self, data.useDomainProxy);
            }
            if (data.logglyKey) {
                this.setKey(self, data.logglyKey);
                return;
            }
            if (data.session_id) {
                self.setSession(data.session_id);
                return;
            }
        }
        if (!self.key) {
            return;
        }
        self.track(data).subscribe((response) => {
            // Success
        }, (error) => {
            console.error(error);
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    track(data) {
        // inject session id
        data.sessionId = this.session_id;
        return this._http.post(this.inputUrl, data, { headers: new HttpHeaders().set('Content-Type', 'text/plain') });
    }
    /**
     * @return {?}
     */
    readCookie() {
        let /** @type {?} */ cookie = Cookie.get(this.LOGGLY_SESSION_KEY);
        if (cookie) {
            let /** @type {?} */ i = cookie.indexOf(this.LOGGLY_SESSION_KEY);
            if (i < 0) {
                return false;
            }
            else {
                let /** @type {?} */ end = cookie.indexOf(';', i + 1);
                end = end < 0 ? cookie.length : end;
                return cookie.slice(i + this.LOGGLY_SESSION_KEY_LENGTH, end);
            }
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setCookie(value) {
        Cookie.set(this.LOGGLY_SESSION_KEY, value);
    }
}
LogglyService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LogglyService.ctorParameters = () => [
    { type: HttpClient, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxLogglyModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgxLogglyModule,
            providers: [LogglyService]
        };
    }
}
NgxLogglyModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                declarations: [],
                exports: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { NgxLogglyModule, LogglyService };
//# sourceMappingURL=ngx-loggly-logger.js.map
